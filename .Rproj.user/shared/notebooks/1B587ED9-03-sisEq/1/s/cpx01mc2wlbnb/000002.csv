"0","import numpy as np"
"0","#Funcao que verifica a simetria"
"0","def simetrica(U):"
"0","  for i in range(len(U)):"
"0","    for j  in range(len(U[0])):"
"0","      if U[i][j] != U[j][i]:"
"0","        return 0"
"0","  return 1"
"0",""
"0","#Funcao que verifica se a matriz é positiva definida"
"0","def pos_def(U):"
"0","  auval,auvec = np.linalg.eig(U)"
"0","  cont = 0;"
"0","  for i in range(len(auval)):"
"0","    if auval[i]>0:"
"0","      cont = cont+1"
"0","  if cont == len(U):"
"0","    return 1"
"0","  return 0"
"0",""
"0","#Funcao que faz a soma para os termos G[i][i]"
"0","def SomaCho1(U,i):"
"0","  soma1 = 0"
"0","  for k in range(0,i):"
"0","    soma1 = soma1 + np.power(U[i][k],2)"
"0","  return soma1"
"0",""
"0","#Funcao que faz a soma para os termos G[i][j]"
"0","def SomaCho2(U,i,j):"
"0","  soma2 = 0"
"0","  for k in range(0,j):"
"0","    soma2 = soma2 + U[i][k]*U[j][k]"
"0","  return soma2"
"0",""
"0","#Funcao para o Calculo da Decomposicao de Cholesky"
"0","def MeuCholesly(A):"
"0","  G = np.zeros((len(A),len(A)))"
"0","  if simetrica(A) == pos_def(A):"
"0","    G[0][0] = np.sqrt(A[0][0])"
"0","    for i in range(1,len(A)):"
"0","      G[i][0] = A[i][0]/G[0][0]"
"0","    "
"0","    for j in range(1,len(A)):"
"0","      for i in range(j,len(A)):"
"0","        if i==j:"
"0","          G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))"
"0","          #print(SomaCho1(G,i))"
"0","        else:"
"0","          G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]"
"0","          #print(SomaCho2(G,i,j))"
"0","    G = np.round(G,4)"
"0","    return G "
"0","  else:"
"0","    return print('Não é possível usar Decomposição de Cholesky')"
