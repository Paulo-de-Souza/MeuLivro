library(tinytex)
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::pdflatex('test.tex')
tinytex::pdflatex('test.tex')
library(tinytex)
tinytex::pdflatex('test.tex')
tinytex::uninstall_tinytex()
uninstall_tinytex()
tinytex::uninstall_tinytex()
detach("package:tinytex", unload = TRUE)
library(tinytex)
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::check_installed('framed')
reticulate::repl_python()
reticulate::repl_python()
import matplotlib.pyplot as plt
Y
import numpy as np
#Matriz 3x3
M = np.array([[1,2,3],
[4,5,6],
[7,8,9]])
print(M)
quit
knitr::opts_chunk$set(echo = TRUE)
octaveExe <- Sys.getenv("OCTAVE_EXECUTABLE")
octaveExe
knitr::opts_chunk$set(echo = TRUE)
octaveExe <- Sys.getenv("OCTAVE_EXECUTABLE")
octaveExe
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
octaveExe <- Sys.getenv("OCTAVE_EXECUTABLE")
knitr::opts_chunk$set(echo = TRUE)
octaveExe
knitr::opts_chunk$set(echo = TRUE)
octaveExe <- Sys.getenv("OCTAVE_EXECUTABLE")
octaveExe
octaveExe <- Sys.getenv("C:\Program Files\GNU Octave")
octaveExe <- Sys.getenv(C:\Program Files\GNU Octave)
octaveExe <- Sys.getenv(C:\GNU Octave)
octaveExe <- Sys.getenv(C:/Program Files/GNU Octave)
octaveExe <- Sys.getenv(C:\Program Files\GNU Octave\Octave-6.3.0\mingw64\bin\octave-cli-6.3.0.exe)
octaveExe <- Sys.getenv(C:/Program Files\GNU Octave\Octave-6.3.0\mingw64\bin/octave-cli-6.3.0.exe)
library(knitr)
names(knit_engines$get())
knitr::opts_chunk$set(echo = TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
reticulate::repl_python()
#Funcao que verifica a simetria
def simetrica(U):
for i in range(len(U)):
for j  in range(len(U[0])):
if U[i][j] != U[j][i]:
return 0
return 1
#Funcao que verifica se a matriz é positiva definida
def pos_def(U):
auval,auvec = np.linalg.eig(U)
cont = 0;
for i in range(len(auval)):
if auval[i]>0:
cont = cont+1
if cont == len(U):
return 1
return 0
#Funcao que faz a soma para os termos G[i][i]
def SomaCho1(U,i):
soma1 = 0
for k in range(0,i):
soma1 = soma1 + np.power(U[i][k],2)
return soma1
#Funcao que faz a soma para os termos G[i][j]
def SomaCho2(U,i,j):
soma2 = 0
for k in range(0,j):
soma2 = soma2 + U[i][k]*U[j][k]
return soma2
#Funcao para o Calculo da Decomposicao de Cholesky
def MeuCholesly(A):
G = np.zeros((len(A),len(A)))
if simetrica(A) == pos_def(A):
G[0][0] = np.sqrt(A[0][0])
for i in range(1,len(A)):
G[i][0] = A[i][0]/G[0][0]
for j in range(1,len(A)):
for i in range(j,len(A)):
if i==j:
G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))
#print(SomaCho1(G,i))
else:
G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]
#print(SomaCho2(G,i,j))
G = np.round(G,4)
return G
else:
return print('Não é possível usar Decomposição de Cholesky')
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
MeuCholesly(A)
import numpy as np
#Funcao que verifica a simetria
def simetrica(U):
for i in range(len(U)):
for j  in range(len(U[0])):
if U[i][j] != U[j][i]:
return 0
return 1
#Funcao que verifica se a matriz é positiva definida
def pos_def(U):
auval,auvec = np.linalg.eig(U)
cont = 0;
for i in range(len(auval)):
if auval[i]>0:
cont = cont+1
if cont == len(U):
return 1
return 0
#Funcao que faz a soma para os termos G[i][i]
def SomaCho1(U,i):
soma1 = 0
for k in range(0,i):
soma1 = soma1 + np.power(U[i][k],2)
return soma1
#Funcao que faz a soma para os termos G[i][j]
def SomaCho2(U,i,j):
soma2 = 0
for k in range(0,j):
soma2 = soma2 + U[i][k]*U[j][k]
return soma2
import numpy as np
#Funcao para o Calculo da Decomposicao de Cholesky
def MeuCholesly(A):
G = np.zeros((len(A),len(A)))
if simetrica(A) == pos_def(A):
G[0][0] = np.sqrt(A[0][0])
for i in range(1,len(A)):
G[i][0] = A[i][0]/G[0][0]
for j in range(1,len(A)):
for i in range(j,len(A)):
if i==j:
G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))
#print(SomaCho1(G,i))
else:
G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]
#print(SomaCho2(G,i,j))
G = np.round(G,4)
return G
else:
return print('Não é possível usar Decomposição de Cholesky')
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
MeuCholesly(A)
#Matriz 3x3
import numpy as np
M = np.array([[1,2,3],
[4,5,6],
[7,8,9]])
print(M)
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
print(MeuCholesly(A))
import numpy as np
#Funcao para o Calculo da Decomposicao de Cholesky
def MeuCholesly(A):
G = np.zeros((len(A),len(A)))
if simetrica(A) == pos_def(A):
G[0][0] = np.sqrt(A[0][0])
for i in range(1,len(A)):
G[i][0] = A[i][0]/G[0][0]
for j in range(1,len(A)):
for i in range(j,len(A)):
if i==j:
G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))
#print(SomaCho1(G,i))
else:
G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]
#print(SomaCho2(G,i,j))
G = np.round(G,4)
return G
else:
return print('Não é possível usar Decomposição de Cholesky')
import numpy as np
#Funcao que verifica a simetria
def simetrica(U):
for i in range(len(U)):
for j  in range(len(U[0])):
if U[i][j] != U[j][i]:
return 0
return 1
#Funcao que verifica se a matriz é positiva definida
def pos_def(U):
auval,auvec = np.linalg.eig(U)
cont = 0;
for i in range(len(auval)):
if auval[i]>0:
cont = cont+1
if cont == len(U):
return 1
return 0
#Funcao que faz a soma para os termos G[i][i]
def SomaCho1(U,i):
soma1 = 0
for k in range(0,i):
soma1 = soma1 + np.power(U[i][k],2)
return soma1
#Funcao que faz a soma para os termos G[i][j]
def SomaCho2(U,i,j):
soma2 = 0
for k in range(0,j):
soma2 = soma2 + U[i][k]*U[j][k]
return soma2
import numpy as np
#Funcao para o Calculo da Decomposicao de Cholesky
def MeuCholesly(A):
G = np.zeros((len(A),len(A)))
if simetrica(A) == pos_def(A):
G[0][0] = np.sqrt(A[0][0])
for i in range(1,len(A)):
G[i][0] = A[i][0]/G[0][0]
for j in range(1,len(A)):
for i in range(j,len(A)):
if i==j:
G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))
#print(SomaCho1(G,i))
else:
G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]
#print(SomaCho2(G,i,j))
G = np.round(G,4)
return G
else:
return print('Não é possível usar Decomposição de Cholesky')
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
print(MeuCholesly(A))
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
print(MeuCholesly(A))
M = np.array([[9,0,-27,18],
[0,9,-9,-27],
[-27,-9,99,-27],
[18,-27,-27,121]])
MeuCholesly(M)
import numpy as np
#Funcao que verifica a simetria
def simetrica(U):
for i in range(len(U)):
for j  in range(len(U[0])):
if U[i][j] != U[j][i]:
return 0
return 1
#Funcao que verifica se a matriz é positiva definida
def pos_def(U):
auval,auvec = np.linalg.eig(U)
cont = 0;
for i in range(len(auval)):
if auval[i]>0:
cont = cont+1
if cont == len(U):
return 1
return 0
#Funcao que faz a soma para os termos G[i][i]
def SomaCho1(U,i):
soma1 = 0
for k in range(0,i):
soma1 = soma1 + np.power(U[i][k],2)
return soma1
#Funcao que faz a soma para os termos G[i][j]
def SomaCho2(U,i,j):
soma2 = 0
for k in range(0,j):
soma2 = soma2 + U[i][k]*U[j][k]
return soma2
#Funcao para o Calculo da Decomposicao de Cholesky
def MeuCholesly(A):
G = np.zeros((len(A),len(A)))
if simetrica(A) == pos_def(A):
G[0][0] = np.sqrt(A[0][0])
for i in range(1,len(A)):
G[i][0] = A[i][0]/G[0][0]
for j in range(1,len(A)):
for i in range(j,len(A)):
if i==j:
G[i][j] = np.sqrt(A[i][i] - SomaCho1(G,i))
#print(SomaCho1(G,i))
else:
G[i][j] = (A[i][j] - SomaCho2(G,i,j))/G[j][j]
#print(SomaCho2(G,i,j))
G = np.round(G,4)
return G
else:
return print('Não é possível usar Decomposição de Cholesky')
import numpy as np
A = np.array([[6,15,55],
[15,55,225],
[55,225,979]])
print(MeuCholesly(A))
quit
# Small fig.width
include_graphics(parabola.jpg)
# Small fig.width
include_graphics(C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg)
# Small fig.width
include_graphics(C:\Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg)
# Small fig.width
include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
include_graphics("C:\Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
include_graphics("parabola.jpg")
# Small fig.width
include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
# Small fig.width
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.jpg")
knitr::include_graphics("parabola.png")
knitr::include_graphics("parabola.png")
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.png")
knitr::include_graphics("C:/Users/paulo/Documents/GitHub/MeuLivro/MeuLivro/parabola.png")
knitr::include_graphics("parabola.png")
knitr::include_graphics("parabola.jpg")
knitr::include_graphics("parabola.jpg")
knitr::include_graphics("parabola.jpg")
knitr::include_graphics("parabola.jpg")
